{"version":3,"sources":["cards sync /^/.*/.jpg$","cards/10C.jpg","cards/10D.jpg","cards/10H.jpg","cards/10S.jpg","cards/2C.jpg","cards/2D.jpg","cards/2H.jpg","cards/2S.jpg","cards/3C.jpg","cards/3D.jpg","cards/3H.jpg","cards/3S.jpg","cards/4C.jpg","cards/4D.jpg","cards/4H.jpg","cards/4S.jpg","cards/5C.jpg","cards/5D.jpg","cards/5H.jpg","cards/5S.jpg","cards/6C.jpg","cards/6D.jpg","cards/6H.jpg","cards/6S.jpg","cards/7C.jpg","cards/7D.jpg","cards/7H.jpg","cards/7S.jpg","cards/8C.jpg","cards/8D.jpg","cards/8H.jpg","cards/8S.jpg","cards/9C.jpg","cards/9D.jpg","cards/9H.jpg","cards/9S.jpg","cards/AC.jpg","cards/AD.jpg","cards/AH.jpg","cards/AS.jpg","cards/Gray_back.jpg","cards/Green_back.jpg","cards/JC.jpg","cards/JD.jpg","cards/JH.jpg","cards/JS.jpg","cards/KC.jpg","cards/KD.jpg","cards/KH.jpg","cards/KS.jpg","cards/QC.jpg","cards/QD.jpg","cards/QH.jpg","cards/QS.jpg","cards/Red_back.jpg","cards/Yellow_back.jpg","cards/aces.jpg","cards/back_cards-07.jpg","cards/blue_back.jpg","cards/honor_clubs.jpg","cards/honor_diamond.jpg","cards/honor_heart-14.jpg","cards/honor_spade.jpg","cards/purple_back.jpg","utilities/constants/general.js","utilities/classes/GameController.js","utilities/classes/CardDeck.js","utilities/classes/Card.js","utilities/helpers/handRanks.js","utilities/classes/Player.js","components/Table.js","components/BoardCards.js","components/PlayerCards.js","components/Card.js","components/BettingControls.js","components/BetInput.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","GAME_STATUSES","CARD_SUITS","FACE_CARD_RANKS","GameController","this","isAutoProgress","_cardDeck","CardDeck","_gameStatus","indexOf","_boardCards","_winnerPlayer","_dealerPlayerIndex","_players","createPlayers","_bigBlindAmount","_potTotal","_currentBet","_actionPlayerIndex","smallBlindPlayerIndex","_firstActionPlayerIndex","_currentBettingPlayerIndex","isNewGame","incrementDealer","players","forEach","player","clearHand","chipTotal","playerCount","i","push","Player","sort","seatNumber","newSeatNumber","unavailableSeats","isSeatAvailable","includes","attemptsCount","filter","nextDealerIndex","dealerPlayerIndex","length","nextIndex","actionPlayerIndex","nextStatusIndex","gameStatus","progressFunction","currentBet","dealCommunityCards","nextActionPlayerIndex","isBigBlind","bigBlindPlayerIndex","isSmallBlind","blindAmount","bigBlindAmount","smallBlindAmount","potTotal","dealHoleCards","getPlayersHandResults","getWinner","bind","cardDeck","shuffleCards","dealToIndex","cardDealCount","cardToDeal","cards","splice","holeCards","calculateHandResult","boardCards","progressGame","dealCount","card","isShown","handRanks","rankIndices","playersResultCards","resultCards","rank","handResult","winnerIndex","indexDifference","oneCards","twoCards","rankDifference","winnerPlayer","potHalf","parseFloat","toFixed","amount","isRaise","actionPlayer","betAmount","totalAmount","chipDifference","isAllIn","absChipDifference","Math","abs","otherPlayerIndex","callAmount","otherPlayer","makeBet","smallBlindIndex","bigBlindIndex","generateCards","x","j","suit","k","Card","shuffleCount","floor","random","temp","_rank","_suit","_isShown","_image","image","truncatedRank","toUpperCase","truncatedSuit","toString","require","displayText","HAND_RANK_MANAGER","_cards","_resultCards","sortCards","isAscending","aRank","bRank","otherCards","isPairCard","concat","slice","royalFlushCards","getStraightFlush","isRoyalFlush","getHighCard","getResultCards","console","log","straightFlushCards","isStraightFlush","currentRank","currentSuit","index","isNextCard","isFourOfAKind","fourOfAKindCards","firstCard","firstIndex","firstRank","secondCard","secondIndex","secondRank","threeOfAKindCards","getThreeOfAKind","tempCards","pairCards","getPair","fullHouseCards","isFlush","suitedCards","firstSuit","straightCards","isStraight","isThreeOfAKind","firstPairCards","secondPairCards","isPair","highCards","_handResult","_chipTotal","_isAllIn","handRankFunctions","handRankHelper","HAND_RANK_HELPER","currentFunction","replace","split","join","Table","props","startNewHand","gameController","state","setState","actionBetAmount","startGame","isGameOver","handleActionButtonOnClick","action","target","name","callBet","goAllIn","foldHand","incrementActionPlayer","handleBetChange","className","Button","variant","size","onClick","BoardCards","key","PlayerCards","playerIndex","handRank","isDealer","BettingControls","playerBet","isPlayerAllIn","handleButtonOnClick","Component","useState","isCardsShown","setIsCardsShown","block","cardIndex","src","alt","bettingButtons","disabled","BetInput","minValue","onChange","defaultProps","FormControl","custom","type","min","step","value","parseInt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2KAAA,IAAIA,EAAM,CACT,YAAa,GACb,YAAa,GACb,YAAa,GACb,YAAa,GACb,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,kBAAmB,GACnB,mBAAoB,GACpB,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,WAAY,GACZ,iBAAkB,GAClB,oBAAqB,GACrB,aAAc,GACd,sBAAuB,GACvB,kBAAmB,GACnB,oBAAqB,GACrB,sBAAuB,GACvB,uBAAwB,GACxB,oBAAqB,GACrB,oBAAqB,IAItB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCrFpBU,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3C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","file":"static/js/main.680b81f8.chunk.js","sourcesContent":["var map = {\n\t\"./10C.jpg\": 24,\n\t\"./10D.jpg\": 25,\n\t\"./10H.jpg\": 26,\n\t\"./10S.jpg\": 27,\n\t\"./2C.jpg\": 28,\n\t\"./2D.jpg\": 29,\n\t\"./2H.jpg\": 30,\n\t\"./2S.jpg\": 31,\n\t\"./3C.jpg\": 32,\n\t\"./3D.jpg\": 33,\n\t\"./3H.jpg\": 34,\n\t\"./3S.jpg\": 35,\n\t\"./4C.jpg\": 36,\n\t\"./4D.jpg\": 37,\n\t\"./4H.jpg\": 38,\n\t\"./4S.jpg\": 39,\n\t\"./5C.jpg\": 40,\n\t\"./5D.jpg\": 41,\n\t\"./5H.jpg\": 42,\n\t\"./5S.jpg\": 43,\n\t\"./6C.jpg\": 44,\n\t\"./6D.jpg\": 45,\n\t\"./6H.jpg\": 46,\n\t\"./6S.jpg\": 47,\n\t\"./7C.jpg\": 48,\n\t\"./7D.jpg\": 49,\n\t\"./7H.jpg\": 50,\n\t\"./7S.jpg\": 51,\n\t\"./8C.jpg\": 52,\n\t\"./8D.jpg\": 53,\n\t\"./8H.jpg\": 54,\n\t\"./8S.jpg\": 55,\n\t\"./9C.jpg\": 56,\n\t\"./9D.jpg\": 57,\n\t\"./9H.jpg\": 58,\n\t\"./9S.jpg\": 59,\n\t\"./AC.jpg\": 60,\n\t\"./AD.jpg\": 61,\n\t\"./AH.jpg\": 62,\n\t\"./AS.jpg\": 63,\n\t\"./Gray_back.jpg\": 64,\n\t\"./Green_back.jpg\": 65,\n\t\"./JC.jpg\": 66,\n\t\"./JD.jpg\": 67,\n\t\"./JH.jpg\": 68,\n\t\"./JS.jpg\": 69,\n\t\"./KC.jpg\": 70,\n\t\"./KD.jpg\": 71,\n\t\"./KH.jpg\": 72,\n\t\"./KS.jpg\": 73,\n\t\"./QC.jpg\": 74,\n\t\"./QD.jpg\": 75,\n\t\"./QH.jpg\": 76,\n\t\"./QS.jpg\": 77,\n\t\"./Red_back.jpg\": 78,\n\t\"./Yellow_back.jpg\": 79,\n\t\"./aces.jpg\": 80,\n\t\"./back_cards-07.jpg\": 81,\n\t\"./blue_back.jpg\": 82,\n\t\"./honor_clubs.jpg\": 83,\n\t\"./honor_diamond.jpg\": 84,\n\t\"./honor_heart-14.jpg\": 85,\n\t\"./honor_spade.jpg\": 86,\n\t\"./purple_back.jpg\": 87\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","module.exports = __webpack_public_path__ + \"static/media/10C.354b7b1e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10D.13a231b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10H.d0a839fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10S.c1302c56.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2C.066ae686.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2D.c6677ab4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2H.4b2cf809.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2S.8e24cbaa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3C.38e0df66.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3D.13159968.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3H.b1db92f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3S.ec5993d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4C.78b8df72.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4D.36b51a18.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4H.8fccba55.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4S.a4b73fff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5C.06b943fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5D.10d89619.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5H.f5d702f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5S.8fd39dd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6C.9d135342.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6D.9ed6948d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6H.c7842889.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6S.f1499471.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7C.57202bbb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7D.3d5f6582.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7H.25680783.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7S.8e9fad3a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8C.b139c167.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8D.d5830921.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8H.424248ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8S.b824de6c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9C.79c5345d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9D.4de857aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9H.6df56ea4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9S.70f9f396.jpg\";","module.exports = __webpack_public_path__ + \"static/media/AC.fd0f054b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/AD.7913ce4a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/AH.c5b6a134.jpg\";","module.exports = __webpack_public_path__ + \"static/media/AS.272af404.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gray_back.243e0fb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Green_back.4dfabab2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JC.6d00e155.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JD.fea5118a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JH.454bbb76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/JS.686aea08.jpg\";","module.exports = __webpack_public_path__ + \"static/media/KC.825911bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/KD.12084ce5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/KH.39e16dba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/KS.d710f10c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/QC.e40a157b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/QD.81deb606.jpg\";","module.exports = __webpack_public_path__ + \"static/media/QH.87f96511.jpg\";","module.exports = __webpack_public_path__ + \"static/media/QS.5b6749fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Red_back.cc10d8e1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Yellow_back.8788b8fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aces.aff124e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/back_cards-07.0d1d815b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/blue_back.d9e0d11e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/honor_clubs.b07aa185.jpg\";","module.exports = __webpack_public_path__ + \"static/media/honor_diamond.f6026990.jpg\";","module.exports = __webpack_public_path__ + \"static/media/honor_heart-14.3458f8cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/honor_spade.68015988.jpg\";","module.exports = __webpack_public_path__ + \"static/media/purple_back.438c2e78.jpg\";","const GAME_STATUSES = [\r\n  'waiting', 'opening', 'betting1', 'flop', 'betting2',\r\n  'turn', 'betting3', 'river', 'betting4', 'showdown'\r\n];\r\nconst CARD_SUITS = ['clubs', 'diamonds', 'hearts', 'spades'];\r\nconst FACE_CARD_RANKS = ['jack', 'queen', 'king', 'ace'];\r\n\r\nexport {\r\n  GAME_STATUSES,\r\n  CARD_SUITS,\r\n  FACE_CARD_RANKS,\r\n};\r\n\r\nexport default {\r\n  GAME_STATUSES,\r\n  CARD_SUITS,\r\n  FACE_CARD_RANKS,\r\n};\r\n","import { CardDeck, Player } from './';\r\nimport { GAME_STATUSES } from '../constants/general';\r\n\r\nexport default class GameController {\r\n  constructor() {\r\n    this.isAutoProgress = false;\r\n    this._cardDeck = new CardDeck();\r\n    this._gameStatus = GAME_STATUSES[GAME_STATUSES.indexOf('waiting')];\r\n    this._boardCards = [];\r\n    this._winnerPlayer = false;\r\n    this._dealerPlayerIndex = 0;\r\n    this._players = this.createPlayers(2);\r\n    this._bigBlindAmount = 20;\r\n    this._potTotal = 0;\r\n    this._currentBet = 0;\r\n    this._actionPlayerIndex = this.smallBlindPlayerIndex;\r\n    this._firstActionPlayerIndex = this._actionPlayerIndex;\r\n    this._currentBettingPlayerIndex = false;\r\n  }\r\n\r\n  get cardDeck() {\r\n    return this._cardDeck;\r\n  }\r\n\r\n  get players() {\r\n    return this._players.sort(({ seatNumber: a }, { seatNumber: b }) => a - b);\r\n  }\r\n\r\n  get gameStatus() {\r\n    return this._gameStatus;\r\n  }\r\n\r\n  set gameStatus(gameStatus) {\r\n    this._gameStatus = gameStatus;\r\n  }\r\n\r\n  get boardCards() {\r\n    return this._boardCards;\r\n  }\r\n\r\n  get bigBlindAmount() { return this._bigBlindAmount; }\r\n  get smallBlindAmount() { return this._bigBlindAmount / 2; }\r\n  get potTotal() { return this._potTotal; };\r\n  set potTotal(potTotal) { this._potTotal = potTotal; }\r\n  get currentBet() { return this._currentBet; };\r\n  set currentBet(currentBet) { this._currentBet = currentBet; }\r\n  get actionPlayerIndex() { return this._actionPlayerIndex; }\r\n  set actionPlayerIndex(actionPlayerIndex) { this._actionPlayerIndex = actionPlayerIndex; }\r\n  get currentBettingPlayerIndex() { return this._currentBettingPlayerIndex; }\r\n\r\n  get dealerPlayerIndex() {\r\n    return this._dealerPlayerIndex;\r\n  }\r\n\r\n  get smallBlindPlayerIndex() {\r\n    let smallBlindIndex = this.dealerPlayerIndex + 1;\r\n    if (smallBlindIndex >= this.players.length) smallBlindIndex = 0;\r\n    if (this.players.length === 2) smallBlindIndex = this.dealerPlayerIndex;\r\n    return smallBlindIndex;\r\n  }\r\n\r\n  get bigBlindPlayerIndex() {\r\n    let bigBlindIndex = this.smallBlindPlayerIndex + 1;\r\n    if (bigBlindIndex >= this.players.length) bigBlindIndex = 0;\r\n    if (this.players.length === 2) bigBlindIndex = this.dealerPlayerIndex + 1;\r\n    if (bigBlindIndex >= this.players.length) bigBlindIndex = 0;\r\n    return bigBlindIndex;\r\n  }\r\n\r\n  get winnerPlayer() { return this._winnerPlayer; }\r\n\r\n  startNewHand(isNewGame = false) {\r\n    this._cardDeck = new CardDeck();\r\n    this._gameStatus = GAME_STATUSES[GAME_STATUSES.indexOf('waiting')];\r\n    this._boardCards = [];\r\n    this._winnerPlayer = false;\r\n    this._potTotal = 0;\r\n    this._currentBet = 0;\r\n    this.isAutoProgress = false;\r\n    this.incrementDealer();\r\n\r\n    this.players.forEach(player => {\r\n      player.clearHand();\r\n      if (isNewGame) player.chipTotal = 1500;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  createPlayers(playerCount) {\r\n    const players = [];\r\n    for (let i = 1; i <= playerCount; i++) {\r\n      players.push(new Player(i));\r\n    }\r\n    players.sort(({ seatNumber: a }, { seatNumber: b }) => a - b);\r\n    return players;\r\n  }\r\n\r\n  addPlayer(newSeatNumber) {\r\n    const { players } = this;\r\n    let unavailableSeats = players.map(({ seatNumber }) => seatNumber);\r\n    const isWithinRange = newSeatNumber > 0 && newSeatNumber <= 8;\r\n    let isSeatAvailable = isWithinRange && !unavailableSeats.includes(newSeatNumber);\r\n    let seatNumber = isSeatAvailable ? newSeatNumber : 1;\r\n    let attemptsCount = 0;\r\n\r\n    while (!isSeatAvailable && attemptsCount > 10) {\r\n      attemptsCount += 1;\r\n      isSeatAvailable = !unavailableSeats.includes(seatNumber);\r\n\r\n      if (!isSeatAvailable) {\r\n        seatNumber += 1;\r\n        if (seatNumber > 8) seatNumber = 1;\r\n      }\r\n    }\r\n\r\n    players.push(new Player(seatNumber));\r\n    players.sort(({ seatNumber: a }, { seatNumber: b }) => a - b);\r\n    this._players = players;\r\n  }\r\n\r\n  removePlayer(seatNumber) {\r\n    let { players } = this;\r\n    players = players.filter(player => player.seatNumber !== seatNumber);\r\n    players.sort(({ seatNumber: a }, { seatNumber: b }) => a - b);\r\n    this._players = players;\r\n  }\r\n\r\n  incrementDealer() {\r\n    const { dealerPlayerIndex, players } = this;\r\n    let nextDealerIndex = dealerPlayerIndex + 1;\r\n    if (nextDealerIndex >= players.length) nextDealerIndex = 0;\r\n    this._dealerPlayerIndex = nextDealerIndex;\r\n  }\r\n\r\n  incrementActionPlayer() {\r\n    const { actionPlayerIndex, players } = this;\r\n    let nextIndex = actionPlayerIndex + 1;\r\n    if (nextIndex >= players.length) nextIndex = 0;\r\n    this._actionPlayerIndex = nextIndex;\r\n  }\r\n\r\n  progressGame() {\r\n    let nextStatusIndex = GAME_STATUSES.indexOf(this.gameStatus) + 1;\r\n    if (nextStatusIndex >= GAME_STATUSES.length) nextStatusIndex = 0;\r\n    this.gameStatus = GAME_STATUSES[nextStatusIndex];\r\n\r\n    let { gameStatus } = this;\r\n\r\n    const isCommunityDeal = (\r\n      gameStatus === 'flop' ||\r\n      gameStatus === 'turn' ||\r\n      gameStatus === 'river'\r\n    );\r\n\r\n    let progressFunction = () => null;\r\n    if (isCommunityDeal) {\r\n      this.players.forEach(player => player.currentBet = 0);\r\n      progressFunction = this.dealCommunityCards;\r\n      let nextActionPlayerIndex = this.actionPlayerIndex;\r\n      if (nextActionPlayerIndex >= this.players.length) {\r\n        nextActionPlayerIndex = 0;\r\n      }\r\n      this.actionPlayerIndex = nextActionPlayerIndex;\r\n      this._firstActionPlayerIndex = this.actionPlayerIndex;\r\n\r\n      this._currentBettingPlayerIndex = false;\r\n    } else if (gameStatus === 'opening') {\r\n      for (let i = 0; i < this.players.length; i++) {\r\n        const player = this.players[i];\r\n        const isBigBlind = i === this.bigBlindPlayerIndex;\r\n        const isSmallBlind = i === this.smallBlindPlayerIndex;\r\n        let blindAmount = 0;\r\n        if (isBigBlind) blindAmount = this.bigBlindAmount;\r\n        else if (isSmallBlind) blindAmount = this.smallBlindAmount;\r\n        player.chipTotal -= blindAmount\r\n        player.currentBet = blindAmount;\r\n        this.potTotal += blindAmount;\r\n      }\r\n\r\n      this.currentBet = this.bigBlindAmount;\r\n      this.actionPlayerIndex = this.smallBlindPlayerIndex;\r\n      this._firstActionPlayerIndex = this.actionPlayerIndex;\r\n      this._currentBettingPlayerIndex = this.bigBlindPlayerIndex;\r\n      progressFunction = this.dealHoleCards;\r\n    } else if (gameStatus === 'showdown') {\r\n      progressFunction = () => {\r\n        this.getPlayersHandResults();\r\n        this.getWinner();\r\n      };\r\n    }\r\n\r\n    progressFunction = progressFunction.bind(this);\r\n    progressFunction();\r\n\r\n    return this;\r\n  }\r\n\r\n  dealHoleCards() {\r\n    const {\r\n      cardDeck, players, smallBlindPlayerIndex,\r\n    } = this;\r\n\r\n    cardDeck.shuffleCards();\r\n\r\n    let dealToIndex = smallBlindPlayerIndex;\r\n    let cardDealCount = 0;\r\n\r\n    while (cardDealCount < players.length * 2) {\r\n      const cardToDeal = cardDeck.cards.splice(0, 1)[0];\r\n      players[dealToIndex].holeCards.push(cardToDeal);\r\n      cardDealCount += 1;\r\n      dealToIndex += 1;\r\n      if (dealToIndex >= players.length) dealToIndex = 0;\r\n    }\r\n\r\n    players.forEach(player => player.calculateHandResult(this.boardCards));\r\n\r\n    this.progressGame();\r\n  }\r\n\r\n  dealCommunityCards() {\r\n    const { cardDeck, gameStatus, players } = this;\r\n\r\n    cardDeck.cards.splice(0, 1);\r\n\r\n    const dealCount = gameStatus === 'flop' ? 3 : 1;\r\n    for (let i = 0; i < dealCount; i++) {\r\n      const card = cardDeck.cards.splice(0, 1)[0];\r\n      card.isShown = true;\r\n      this._boardCards.push(card);\r\n    }\r\n\r\n    players.forEach(player => player.calculateHandResult(this.boardCards));\r\n\r\n    this.currentBet = 0;\r\n\r\n    this.progressGame();\r\n  }\r\n\r\n  getPlayersHandResults() {\r\n    this.players.forEach(player => {\r\n      player.calculateHandResult(this.boardCards);\r\n    });\r\n  }\r\n\r\n  getWinner() {\r\n    const handRanks = [\r\n      'Royal Flush',\r\n      'Straight Flush',\r\n      'Four Of A Kind',\r\n      'Full House',\r\n      'Flush',\r\n      'Straight',\r\n      'Three Of A Kind',\r\n      'Two Pair',\r\n      'Pair',\r\n      'High Card',\r\n    ];\r\n\r\n    const rankIndices = [];\r\n\r\n    const playersResultCards = this.players.map(({ resultCards, handResult }) => {\r\n      const { rank } = handResult;\r\n      rankIndices.push(handRanks.indexOf(rank));\r\n      return resultCards;\r\n    });\r\n\r\n    let winnerIndex = -1;\r\n    const indexDifference = rankIndices[0] - rankIndices[1];\r\n    if (indexDifference < 0) {\r\n      winnerIndex = 0;\r\n    } else if (indexDifference > 0) {\r\n      winnerIndex = 1;\r\n    } else {\r\n      const [oneCards, twoCards ] = playersResultCards;\r\n\r\n      for (let i = 0; i < oneCards.length; i++) {\r\n        const { rank: oneCardRank } = oneCards[i];\r\n        const { rank: twoCardRank } = twoCards[i];\r\n\r\n        const rankDifference = oneCardRank - twoCardRank;\r\n        if (rankDifference !== 0) {\r\n          winnerIndex = rankDifference > 0 ? 0 : 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const winnerPlayer = this.players[winnerIndex] || false;\r\n\r\n    if (winnerPlayer) {\r\n      winnerPlayer.chipTotal += this.potTotal;\r\n    } else {\r\n      let potHalf = parseFloat((this.potTotal / 2).toFixed(2));\r\n      this.players.forEach(player => player.chipTotal += potHalf);\r\n    }\r\n\r\n    this._winnerPlayer = winnerPlayer;\r\n\r\n    return winnerPlayer;\r\n  }\r\n\r\n  makeBet(amount, isRaise = false) {\r\n    const actionPlayer = this.players[this.actionPlayerIndex];\r\n    let betAmount = isRaise ? this.currentBet + amount : amount;\r\n    let totalAmount = betAmount - actionPlayer.currentBet;\r\n    const chipDifference = actionPlayer.chipTotal - totalAmount;\r\n\r\n    if (chipDifference <= 0) {\r\n      actionPlayer.isAllIn = true;\r\n      const absChipDifference = Math.abs(chipDifference);\r\n      totalAmount -= absChipDifference;\r\n      betAmount -= absChipDifference;\r\n      const otherPlayerIndex = this.actionPlayerIndex === 0 ? 1 : 0;\r\n      this.players[otherPlayerIndex].chipTotal += absChipDifference;\r\n    }\r\n\r\n    actionPlayer.chipTotal -= totalAmount;\r\n    actionPlayer.currentBet += totalAmount;\r\n    this.currentBet = betAmount;\r\n    this._firstActionPlayerIndex = this.actionPlayerIndex;\r\n    this.potTotal += totalAmount;\r\n  }\r\n\r\n  callBet() {\r\n    const actionPlayer = this.players[this.actionPlayerIndex];\r\n    let callAmount = this.currentBet - actionPlayer.currentBet;\r\n    const chipDifference = actionPlayer.chipTotal - callAmount;\r\n    const otherPlayerIndex = this.actionPlayerIndex === 0 ? 1 : 0;\r\n    const otherPlayer = this.players[otherPlayerIndex];\r\n\r\n    if (chipDifference <= 0) {\r\n      actionPlayer.isAllIn = true;\r\n      const absChipDifference = Math.abs(chipDifference);\r\n      callAmount -= absChipDifference;\r\n      otherPlayer.chipTotal += absChipDifference;\r\n    }\r\n\r\n    actionPlayer.chipTotal -= callAmount;\r\n    actionPlayer.currentBet += callAmount;\r\n\r\n    if (otherPlayer.chipTotal === 0) {\r\n      this.isAutoProgress = true;\r\n    }\r\n\r\n    this.potTotal += callAmount;\r\n  }\r\n\r\n  goAllIn() {\r\n    const actionPlayer = this.players[this.actionPlayerIndex];\r\n    actionPlayer.isAllIn = true;\r\n    const isRaise = this.currentBet > 0;\r\n    this.makeBet(actionPlayer.chipTotal - this.currentBet + actionPlayer.currentBet, isRaise);\r\n  }\r\n\r\n  foldHand() {\r\n    const otherPlayerIndex = this.actionPlayerIndex === 0 ? 1 : 0;\r\n    const otherPlayer = this.players[otherPlayerIndex];\r\n    otherPlayer.chipTotal += this.potTotal;\r\n    this.gameStatus = 'showdown';\r\n    return this;\r\n  }\r\n};","import { Card } from './';\r\nimport { CARD_SUITS } from '../constants/general';\r\n\r\nexport default class CardDeck {\r\n  constructor() {\r\n    this.cards = this.generateCards();\r\n    this.shuffleCards();\r\n  }\r\n\r\n  generateCards(x) {\r\n    const cards = [];\r\n    for (let j = 0; j < CARD_SUITS.length; j++) {\r\n      const suit = CARD_SUITS[j];\r\n      for (let k = 2; k <= 14; k++) {\r\n        cards.push(new Card(k, suit));\r\n      }\r\n    }\r\n    return cards;\r\n  }\r\n\r\n  shuffleCards() {\r\n    const { cards } = this;\r\n\r\n    let shuffleCount = 0;\r\n    while (shuffleCount < 1000) {\r\n      for(let i = cards.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * i);\r\n        const temp = cards[i];\r\n        cards[i] = cards[j];\r\n        cards[j] = temp;\r\n      }\r\n      shuffleCount += 1;\r\n    }\r\n  }\r\n}","import { FACE_CARD_RANKS } from '../constants/general';\r\n\r\nexport default class Card {\r\n  constructor (rank, suit) {\r\n    this._rank = rank;\r\n    this._suit = suit;\r\n    this._isShown = false;\r\n    this._image = this.image;\r\n  }\r\n\r\n  get rank() { return this._rank; }\r\n  get suit() { return this._suit; }\r\n\r\n  get displayText() {\r\n    let truncatedRank = this.rank;\r\n\r\n    if (truncatedRank > 10) {\r\n      truncatedRank = FACE_CARD_RANKS[truncatedRank - 11][0].toUpperCase();\r\n    }\r\n\r\n    const truncatedSuit = this.suit.toString()[0].toUpperCase();\r\n    return `${truncatedRank}${truncatedSuit}`\r\n  };\r\n\r\n  get isShown() { return this._isShown; }\r\n  set isShown(isShown) {\r\n    this._isShown = isShown;\r\n    this._image = this.image;\r\n  }\r\n\r\n  get image() {\r\n    let deckImagePath = 'Gray_back';\r\n    return require(`../../cards/${this._isShown ? this.displayText : deckImagePath}.jpg`);\r\n  }\r\n};\r\n","export default class HAND_RANK_MANAGER {\r\n  constructor(cards) {\r\n    this._cards = cards;\r\n    this._resultCards = [];\r\n    this.sortCards();\r\n  }\r\n\r\n  get cards() { return [].concat(this._cards); }\r\n\r\n  get resultCards() { return [].concat(this._resultCards); }\r\n\r\n  sortCards(isAscending = false) {\r\n    return this._cards.sort(({ rank: aRank }, { rank: bRank}) => (\r\n      isAscending ? aRank - bRank : bRank - aRank\r\n    ));\r\n  };\r\n\r\n  getResultCards(cards) {\r\n    let otherCards = [];\r\n    this.cards.forEach(card => {\r\n      let isPairCard = false;\r\n\r\n      cards.forEach(({ rank, suit }) => {\r\n        if (isPairCard) return;\r\n        isPairCard = (rank === card.rank) && (suit === card.suit);\r\n      });\r\n\r\n      if (!isPairCard) otherCards.push(card);\r\n    });\r\n\r\n    otherCards.sort(({ rank: aRank }, { rank: bRank }) => bRank - aRank);\r\n    otherCards = cards.concat(otherCards);\r\n    this._resultCards = otherCards.slice(0, 5);\r\n  }\r\n\r\n  getRoyalFlush() {\r\n    const royalFlushCards = this.getStraightFlush();\r\n    if (!royalFlushCards) return false;\r\n\r\n    const highCard = this.getHighCard()[0];\r\n    const { rank } = highCard;\r\n\r\n    const isRoyalFlush = rank === 14;\r\n    if (isRoyalFlush) this.getResultCards(royalFlushCards);\r\n\r\n    console.log(isRoyalFlush);\r\n\r\n    return isRoyalFlush ? royalFlushCards : false;\r\n  };\r\n\r\n  getStraightFlush() {\r\n    this.sortCards();\r\n\r\n    let straightFlushCards = [];\r\n    let isStraightFlush = false;\r\n\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      let { rank: currentRank, suit: currentSuit } = this.cards[i];\r\n\r\n      straightFlushCards = (this.cards.filter((card, index) => {\r\n        const { rank, suit } = card;\r\n\r\n        if (index === i) {\r\n          currentRank = rank;\r\n          return true;\r\n        }\r\n\r\n        const isNextCard = Math.abs(currentRank - rank) === 1\r\n        if (isNextCard) currentRank = rank;\r\n        return isNextCard && suit === currentSuit;\r\n      }));\r\n\r\n      if (straightFlushCards.length >= 5) {\r\n        isStraightFlush = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    straightFlushCards.sort(({ rank: aRank }, { rank: bRank }) => bRank - aRank);\r\n    if (straightFlushCards.length > 5) straightFlushCards = straightFlushCards.splice(0, 5);\r\n\r\n    if (isStraightFlush) this.getResultCards(straightFlushCards);\r\n\r\n    return isStraightFlush ? straightFlushCards : false;\r\n  };\r\n\r\n  getFourOfAKind() {\r\n    this.sortCards();\r\n\r\n    let isFourOfAKind = false;\r\n    let fourOfAKindCards = [];\r\n    this.cards.forEach((firstCard, firstIndex) => {\r\n      if (isFourOfAKind) return;\r\n      const { rank: firstRank } = firstCard;\r\n      fourOfAKindCards = [firstCard];\r\n      this.cards.forEach((secondCard, secondIndex) => {\r\n        if (isFourOfAKind || firstIndex === secondIndex) return;\r\n        const { rank: secondRank } = secondCard;\r\n        if (firstRank === secondRank) {\r\n          fourOfAKindCards.push(secondCard);\r\n          isFourOfAKind = fourOfAKindCards.length === 4;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (isFourOfAKind) this.getResultCards(fourOfAKindCards);\r\n\r\n    return isFourOfAKind ? fourOfAKindCards : false;\r\n  };\r\n\r\n  getFullHouse() {\r\n    this.sortCards();\r\n\r\n    const threeOfAKindCards = this.getThreeOfAKind();\r\n    if (!threeOfAKindCards) return false;\r\n\r\n    const tempCards = this.cards;\r\n\r\n    this._cards = tempCards.filter(({ rank }) => (\r\n      rank !== threeOfAKindCards[0].rank\r\n    ));\r\n\r\n    const pairCards = this.getPair();\r\n    this._cards = tempCards;\r\n    if (!pairCards) return false;\r\n\r\n    const fullHouseCards = threeOfAKindCards.concat(pairCards);\r\n    this.getResultCards(fullHouseCards);\r\n    return fullHouseCards;\r\n  };\r\n\r\n  getFlush() {\r\n    this.sortCards();\r\n\r\n    let isFlush = false;\r\n    let suitedCards = [];\r\n\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      if (isFlush) break;\r\n      const firstCard = this.cards[i];\r\n      const { suit: firstSuit } = firstCard;\r\n      suitedCards = [firstCard];\r\n      for (let j = 0; j < this.cards.length; j++) {\r\n        if (isFlush) break;\r\n        if (j !== i) {\r\n          const secondCard = this.cards[j];\r\n          const { suit: secondSuit } = secondCard;\r\n\r\n          if (secondSuit === firstSuit) {\r\n            suitedCards.push(secondCard);\r\n            isFlush = suitedCards.length === 5;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isFlush) this.getResultCards(suitedCards);\r\n\r\n    return isFlush ? suitedCards : false;\r\n  };\r\n\r\n  getStraight() {\r\n    this.sortCards();\r\n\r\n    let straightCards = [];\r\n    let isStraight = false;\r\n\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      let currentRank = this.cards[i].rank;\r\n      straightCards = this.cards.filter((card, index) => {\r\n        const { rank } = card;\r\n\r\n        if (index === i) {\r\n          currentRank = rank;\r\n          return true;\r\n        }\r\n\r\n        const isNextCard = Math.abs(currentRank - rank) === 1;\r\n        if (isNextCard) currentRank = rank;\r\n        return isNextCard;\r\n      });\r\n\r\n      if (straightCards.length >= 5) {\r\n        isStraight = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    straightCards.sort(({ rank: aRank }, { rank: bRank }) => bRank - aRank);\r\n    if (straightCards.length > 5) straightCards = straightCards.splice(0, 5);\r\n\r\n    if (isStraight) this.getResultCards(straightCards);\r\n\r\n    return isStraight ? straightCards : false;\r\n  };\r\n\r\n  getThreeOfAKind() {\r\n    this.sortCards();\r\n\r\n    let isThreeOfAKind = false;\r\n    let threeOfAKindCards = [];\r\n    this.cards.forEach((firstCard, firstIndex) => {\r\n      if (isThreeOfAKind) return;\r\n      const { rank: firstRank } = firstCard;\r\n      threeOfAKindCards = [firstCard];\r\n      this.cards.forEach((secondCard, secondIndex) => {\r\n        if (isThreeOfAKind || firstIndex === secondIndex) return;\r\n        const { rank: secondRank } = secondCard;\r\n        if (firstRank === secondRank) {\r\n          threeOfAKindCards.push(secondCard);\r\n          isThreeOfAKind = threeOfAKindCards.length === 3;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (isThreeOfAKind) this.getResultCards(threeOfAKindCards);\r\n\r\n    return isThreeOfAKind ? threeOfAKindCards : false;\r\n  };\r\n\r\n  getTwoPair() {\r\n    this.sortCards();\r\n\r\n    const firstPairCards = this.getPair();\r\n    if (!firstPairCards) return false;\r\n\r\n    const tempCards = this.cards;\r\n\r\n    this._cards = tempCards.filter(({ rank }) => (\r\n      rank !== firstPairCards[0].rank\r\n    ));\r\n\r\n    const secondPairCards = this.getPair();\r\n    this._cards = tempCards;\r\n    if (!secondPairCards) return false;\r\n\r\n    const pairCards = firstPairCards.concat(secondPairCards);\r\n    this.getResultCards(pairCards);\r\n\r\n    return pairCards;\r\n  };\r\n\r\n  getPair() {\r\n    this.sortCards();\r\n\r\n    let isPair = false;\r\n    let pairCards = [];\r\n    this.cards.forEach((firstCard, firstIndex) => {\r\n      if (isPair) return;\r\n      const { rank: firstRank } = firstCard;\r\n      pairCards = [firstCard];\r\n      this.cards.forEach((secondCard, secondIndex) => {\r\n        if (isPair || firstIndex === secondIndex) return;\r\n        const { rank: secondRank } = secondCard;\r\n        if (firstRank === secondRank) {\r\n          pairCards.push(secondCard);\r\n          isPair = true;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (isPair) this.getResultCards(pairCards);\r\n\r\n    return isPair ? pairCards : false;\r\n  };\r\n\r\n  getHighCard() {\r\n    this.sortCards();\r\n    const highCards = [this.cards[0]];\r\n    this.getResultCards(highCards);\r\n    return highCards;\r\n  };\r\n};\r\n\r\n","import { HAND_RANK_HELPER } from '../helpers';\r\n\r\nexport default class Player {\r\n  constructor(seatNumber) {\r\n    this.seatNumber = seatNumber;\r\n    this.holeCards = [];\r\n    this._handResult = false;\r\n    this._resultCards = false;\r\n    this._chipTotal = 1500;\r\n    this._currentBet = 0;\r\n    this._isAllIn = false;\r\n  }\r\n\r\n  get handResult() { return this._handResult; }\r\n  get resultCards() { return this._resultCards; }\r\n\r\n  get chipTotal() { return this._chipTotal; }\r\n  set chipTotal(chipTotal) { this._chipTotal = chipTotal; }\r\n\r\n  get currentBet() { return this._currentBet; }\r\n  set currentBet(currentBet) { this._currentBet = currentBet; }\r\n\r\n  get isAllIn() { return this._isAllIn; }\r\n  set isAllIn(isAllIn) { this._isAllIn = isAllIn; }\r\n\r\n  clearHand() {\r\n    this.holeCards = [];\r\n    this._handResult = false;\r\n    this._resultCards = false;\r\n    this._currentBet = 0;\r\n    this._isAllIn = false;\r\n  }\r\n\r\n  calculateHandResult(boardCards) {\r\n    const handRankFunctions = [\r\n      'getRoyalFlush',\r\n      'getStraightFlush',\r\n      'getFourOfAKind',\r\n      'getFullHouse',\r\n      'getFlush',\r\n      'getStraight',\r\n      'getThreeOfAKind',\r\n      'getTwoPair',\r\n      'getPair',\r\n      'getHighCard',\r\n    ];\r\n\r\n    const handRankHelper = new HAND_RANK_HELPER(this.holeCards.concat(boardCards));\r\n\r\n    const handResult = {\r\n      rank: '',\r\n      cards: false,\r\n    };\r\n\r\n    let index = 0;\r\n    while (!handResult.cards) {\r\n      const currentFunction = handRankFunctions[index];\r\n\r\n      handResult.rank = currentFunction.replace('get', '').split(/(?=[A-Z])/).join(' ');\r\n      handResult.cards = handRankHelper[currentFunction]();\r\n\r\n      index += 1;\r\n    }\r\n\r\n    this._handResult = handResult;\r\n    this._resultCards = handRankHelper.resultCards;\r\n\r\n    return this.resultCards;\r\n  }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { GameController } from '../utilities/classes/';\r\n\r\n// Components.\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BoardCards, PlayerCards, BettingControls } from './';\r\n\r\nexport default class Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const gameController = new GameController();\r\n\r\n    this.state = {\r\n      gameController,\r\n      actionBetAmount: gameController.bigBlindAmount,\r\n    };\r\n  }\r\n\r\n  startNewHand = () => {\r\n    const { gameController: { startNewHand } } = this.state;\r\n    const gameController = startNewHand();\r\n    this.setState(() => ({ gameController, actionBetAmount: gameController.bigBlindAmount }));\r\n  }\r\n\r\n  startGame = () => {\r\n    let { gameController } = this.state;\r\n    gameController = gameController.progressGame();\r\n    this.setState(() => ({ gameController }));\r\n  };\r\n\r\n  progressGame = (isGameOver = false) => {\r\n    let { gameController } = this.state;\r\n    const { gameStatus } = gameController;\r\n\r\n    if (gameStatus === 'showdown') {\r\n      gameController = gameController.startNewHand(isGameOver);\r\n    }\r\n\r\n    gameController = gameController.progressGame();\r\n\r\n    this.setState(() => ({ gameController, actionBetAmount: gameController.bigBlindAmount }));\r\n  }\r\n\r\n  handleActionButtonOnClick = ({ target: { name: action } }) => {\r\n    let { gameController, actionBetAmount } = this.state;\r\n\r\n    if (action === 'call') gameController.callBet();\r\n    if (action === 'bet' || action === 'raise') {\r\n      gameController.makeBet(actionBetAmount, action === 'raise');\r\n    }\r\n\r\n    if (action === 'all-in') gameController.goAllIn();\r\n\r\n    if (action === 'fold') {\r\n      gameController.foldHand();\r\n      this.progressGame();\r\n    };\r\n\r\n    gameController.incrementActionPlayer();\r\n\r\n    const {\r\n      actionPlayerIndex, _firstActionPlayerIndex,\r\n    } = gameController;\r\n\r\n    if (action !== 'bet' && actionPlayerIndex === _firstActionPlayerIndex) {\r\n      return this.progressGame();\r\n    }\r\n\r\n    this.setState(() => ({ gameController }));\r\n  };\r\n\r\n  handleBetChange = actionBetAmount => {\r\n    this.setState(() => ({ actionBetAmount }))\r\n  };\r\n\r\n  render() {\r\n    const { gameController, actionBetAmount, } = this.state;\r\n    const {\r\n      boardCards, gameStatus, players, winnerPlayer,\r\n      dealerPlayerIndex, smallBlindPlayerIndex,\r\n      bigBlindPlayerIndex, bigBlindAmount,\r\n      potTotal, currentBet, actionPlayerIndex,\r\n      isAutoProgress,\r\n    } = gameController;\r\n\r\n    if (gameStatus !== 'showdown' && isAutoProgress) {\r\n      this.progressGame();\r\n    }\r\n\r\n    let isGameOver = false;\r\n    for (let i = 0; i < players.length; i++) {\r\n      const { chipTotal } = players[i];\r\n      if (gameStatus === 'showdown' && chipTotal === 0) {\r\n        isGameOver = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"vh-100\">\r\n        {gameStatus === 'waiting' ? (\r\n          <div className=\"d-flex justify-content-center align-items-center h-100\">\r\n            <Button\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={this.startGame}\r\n              className=\"w-75 p-5\"\r\n            >\r\n              Start\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"d-flex flex-column h-100\">\r\n            {gameStatus}\r\n            <BoardCards\r\n              key={boardCards.length}\r\n              cards={boardCards}\r\n              potTotal={potTotal}\r\n              winnerPlayer={winnerPlayer}\r\n              isGameOver={isGameOver}\r\n            />\r\n\r\n            <div className=\"d-flex justify-content-around\">\r\n              {players.map(({\r\n                handResult, holeCards, seatNumber, chipTotal,\r\n              }, index) => (\r\n                <Fragment key={`player-${seatNumber}-cards-${holeCards.length}`}>\r\n                  <PlayerCards\r\n                    playerIndex={index}\r\n                    cards={holeCards}\r\n                    handRank={handResult ? handResult.rank : false}\r\n                    isDealer={index === dealerPlayerIndex}\r\n                    isSmallBlind={index === smallBlindPlayerIndex}\r\n                    isBigBlind={index === bigBlindPlayerIndex}\r\n                    chipTotal={chipTotal}\r\n                    actionPlayerIndex={actionPlayerIndex}\r\n                  />\r\n\r\n                  {index === 0 && gameStatus.includes('betting') && (\r\n                    <BettingControls\r\n                      currentBet={currentBet}\r\n                      playerBet={players[actionPlayerIndex].currentBet}\r\n                      isPlayerAllIn={players[actionPlayerIndex].isAllIn}\r\n                      bigBlindAmount={bigBlindAmount}\r\n                      actionBetAmount={actionBetAmount}\r\n                      handleButtonOnClick={this.handleActionButtonOnClick}\r\n                      handleBetChange={this.handleBetChange}\r\n                    />\r\n                  )}\r\n\r\n                  {index === 0 && gameStatus === 'showdown' && (\r\n                    <Button\r\n                      variant=\"outline-primary\"\r\n                      size=\"lg\"\r\n                      onClick={() => this.progressGame(isGameOver)}\r\n                      className=\"align-self-start\"\r\n                    >\r\n                      {isGameOver ? 'New Game' : 'Next Hand'}\r\n                    </Button>\r\n                  )}\r\n                </Fragment>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card as CardClass } from '../utilities/classes/';\r\n\r\n// Components.\r\nimport { Card } from './';\r\n\r\nexport default function BoardCards({\r\n  cards, winnerPlayer, potTotal, isGameOver,\r\n}) {\r\n  return (\r\n    <div className=\"d-flex flex-column flex-fill\">\r\n      <div className=\"d-flex align-items-center flex-fill mx-auto community-cards\">\r\n        {cards.map(card => (\r\n          <Card key={`${card.displayText}-${card.isShown}`} card={card} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"h-25\">\r\n        <h2 className=\"text-center\">\r\n          <p>\r\n            {winnerPlayer ? (\r\n              `Player ${winnerPlayer.seatNumber} Wins!`\r\n            ) : (\r\n            `Pot: ${potTotal}`\r\n            )}\r\n          </p>\r\n\r\n          {isGameOver && (\r\n            <p>Game Over</p>\r\n          )}\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nBoardCards.defaultProps = {\r\n  cards: [],\r\n};\r\n\r\nBoardCards.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.instanceOf(CardClass)),\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card as CardClass } from '../utilities/classes/';\r\n\r\n// Components.\r\nimport { Button } from 'react-bootstrap'\r\nimport { Card } from './';\r\n\r\nexport default function PlayerCards({\r\n  playerIndex, cards, handRank, isDealer, isSmallBlind,\r\n  isBigBlind, chipTotal, actionPlayerIndex,\r\n}) {\r\n  const [isCardsShown, setIsCardsShown] = useState(\r\n    cards.filter(({ isShown }) => isShown).length > 0\r\n  );\r\n\r\n  const toggleIsCardsShown = cardIndex => {\r\n    cards.forEach(card => card.isShown = !isCardsShown);\r\n    setIsCardsShown(!isCardsShown);\r\n  }\r\n\r\n  return (\r\n    <div className={`${playerIndex === actionPlayerIndex ? 'border border-primary' : ''}`}>\r\n      <div className=\"d-flex justify-content-around align-items-center text-center\">\r\n        <p className=\"w-25 text-left\">{chipTotal}</p>\r\n\r\n        <p className=\"flex-fill\">\r\n          {handRank || 'unknown'}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"d-flex\">\r\n        <div className={`d-flex flex-column ${playerIndex === 0 ? 'order-1' : ''}`}>\r\n          {isDealer && (\r\n            <span className=\"mx-2\">D</span>\r\n          )}\r\n\r\n          {isSmallBlind && (\r\n            <span className=\"mx-2\">SB</span>\r\n          )}\r\n\r\n          {isBigBlind && (\r\n            <span className=\"mx-2\">BB</span>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"d-flex flex-fill\">\r\n          {cards.map(card => (\r\n            <Card key={card.displayText} card={card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <Button\r\n        block\r\n        size=\"sm\"\r\n        variant=\"outline-danger\"\r\n        onClick={toggleIsCardsShown}\r\n      >\r\n        {isCardsShown ? 'Hide Cards' : 'Show Cards'}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nPlayerCards.defaultProps = {\r\n  cards: [],\r\n};\r\n\r\nPlayerCards.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.instanceOf(CardClass)),\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card as CardClass } from '../utilities/classes/';\r\n\r\nexport default function Card({ card }) {\r\n  const { image, rank, suit } = card;\r\n\r\n  return (\r\n    <div className=\"mx-2\">\r\n      <img\r\n        src={image}\r\n        alt={`${rank} of ${suit}`}\r\n        className=\"playing-card-image\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.defaultProps = {\r\n  card: null,\r\n};\r\n\r\nCard.propTypes = {\r\n  card: PropTypes.instanceOf(CardClass),\r\n};\r\n\r\n\r\n","import React from 'react';\r\n\r\n// Components.\r\nimport { Button } from 'react-bootstrap';\r\nimport { BetInput } from './';\r\n\r\nexport default function BettingControls({\r\n  currentBet, playerBet, bigBlindAmount, actionBetAmount,\r\n  isPlayerAllIn, handleButtonOnClick, handleBetChange,\r\n}) {\r\n  // if (isPlayerAllIn) handleButtonOnClick({ target: { name: '' } })\r\n\r\n  const bettingButtons = [{\r\n    action: 'call',\r\n    isShown: currentBet > playerBet,\r\n  }, {\r\n    action: 'check',\r\n    isShown: currentBet === playerBet,\r\n  }, {\r\n    action: 'bet',\r\n    isShown: currentBet === 0,\r\n  }, {\r\n    action: 'raise',\r\n    isShown: currentBet > 0,\r\n  }, {\r\n    action: 'all-in',\r\n    isShown: true,\r\n  }, {\r\n    action: 'fold',\r\n    isShown: true,\r\n  }];\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-around\">\r\n        {bettingButtons.map(({ action, isShown }) => (\r\n          <Button\r\n            key={action}\r\n            disabled={isPlayerAllIn}\r\n            variant=\"outline-primary\"\r\n            size=\"lg\"\r\n            name={action}\r\n            onClick={handleButtonOnClick}\r\n            className={`flex-fill text-capitalize ${isShown ? '' : 'd-none'}`}\r\n          >\r\n            {action.split('-').join(' ')}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n\r\n      <BetInput\r\n        actionBetAmount={actionBetAmount}\r\n        minValue={bigBlindAmount}\r\n        onChange={handleBetChange}\r\n      />\r\n    </div>\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\n// Components.\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nexport default function BetInput({\r\n  minValue, actionBetAmount, onChange,\r\n}) {\r\n  return (\r\n    <div className=\"d-flex align-items-center\">\r\n      <FormControl\r\n        custom\r\n        type=\"range\"\r\n        min={minValue}\r\n        step={10}\r\n        value={actionBetAmount}\r\n        onChange={({ target: { value } }) => onChange(parseInt(value))}\r\n      />\r\n\r\n      <FormControl\r\n        custom\r\n        type=\"number\"\r\n        value={actionBetAmount}\r\n        onChange={({ target: { value } }) => onChange(parseInt(value))}\r\n        className=\"w-25 ml-2\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport { Table } from './components';\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}